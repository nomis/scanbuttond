Scanner Button Daemon (scanbuttond), Version 0.2.2
==================================================


First things first
------------------

This software is in its very early stages of development.
Although this daemon seems to work for most people, there
may still be lots of critical bugs.
Be prepared for the worst!


Introduction
------------

Modern scanners usually have several front panel buttons
which are intended to trigger certain actions like
copying, faxing or mailing the scanned document.
This daemon monitors the scanner's buttons and runs a
shell script whenever one of these buttons has been 
pressed. Because it is accessing the scanner directly
via libusb, there should be no conflicts with SANE
or other scanner drivers: scanbuttond simply won't touch
the scanner hardware while you are using SANE.


Requirements
------------

Scanner: see "supported scanners" below
Operating system: Linux (and perhaps other Unix-like systems)
Connection: USB (using libusb, the scanner kernel module is 
            currently unsupported)


Compilation & Installation
--------------------------

type
> make clean
> make
> make install

This will install the following files:
/usr/local/bin/scanbuttond
/usr/local/lib/scanbuttond/libepson.so
/usr/local/lib/scanbuttond/libepson.so.1
/usr/local/lib/scanbuttond/libepson.so.1.0
/usr/local/lib/scanbuttond/libplustek.so
/usr/local/lib/scanbuttond/libplustek.so.1
/usr/local/lib/scanbuttond/libplustek.so.1.0
/usr/local/lib/scanbuttond/libsnapscan.so
/usr/local/lib/scanbuttond/libsnapscan.so.1
/usr/local/lib/scanbuttond/libsnapscan.so.1.0
/usr/local/lib/scanbuttond/libniash.so
/usr/local/lib/scanbuttond/libniash.so.1
/usr/local/lib/scanbuttond/libniash.so.1.0
/usr/local/lib/scanbuttond/libmeta.so
/usr/local/lib/scanbuttond/libmeta.so.1
/usr/local/lib/scanbuttond/libmeta.so.1.0
/etc/scanbuttond/buttonpressed.sh
/etc/scanbuttond/initscanner.sh
/etc/scanbuttond/meta.conf


Usage
-----

If you just want to try out scanbuttond, type
> scanbuttond

If everyhing works, scanbuttond will fork() to background.
To see what scanbuttond is doing, you can have a look at your
system log, for example /var/log/everything/current (for Gentoo
Linux systems).

To terminate scanbuttond, type
> killall scanbuttond
That should do the job. Scanbuttond installs a signal handler
which should ensure a clean shutdown even when it's killed.

If you intend to use scanbuttond seriously, you would probably
want to write a distribution-specific init-script for starting
and stopping the daemon.


Supported scanners
------------------

Supported by the epson backend using libusb connection:
* Epson Expression 1600 (expected to work)
* Epson Expression 1680 (expected to work)
* Epson Perfection 610 (expected to work)
* Epson Perfection 636U (expected to work)
* Epson Perfection 640 (expected to work)
* Epson Perfection 1200U (expected to work)
* Epson Perfection 1240 (expected to work)
* Epson Perfection 1640 (expected to work)
* Epson Perfection 1650 (working, tested)
* Epson Perfection 1660 (expected to work)
* Epson Perfection 2400 (working, tested)
* Epson Perfection 2450 (expected to work)
* Epson Perfection 3200 (expected to work)
* Epson CX3200 (working, tested)

Supported by the plustek backend using libusb connection:
* Canon CanoScan N1220U (expected to work)
* Canon CanoScan D660U (expected to work)

Supported by the snapscan backend using libusb connection:
* Epson Perfection 2480 (expected to work)
* Epson Perfection 2580 (expected to work)
* Epson Perfection 1670 (working, tested)

Supported by the niash backend using libusb connection:
* Agfa Snapscan Touch (expected to work)
* HP Scanjet 3300c (expected to work)
* HP Scanjet 3400c (expected to work)
* HP Scanjet 4300c (expected to work)


Note: the plustek, snapscan and niash backends were implemented
using information gathered by "sniffing" the communication between
the Windows driver and the scanner, because there is no technical
documentation available for these devices! This means that there 
may be some weird issues (e.g. button press events reported twice).


How to link actions to buttons
------------------------------

Whenever a scanner button has been pressed, scanbuttond
starts a shell script and passes it the button number and
the SANE scanner name as command line arguments.
By default, this shell script is installed as
/etc/scanbuttond/buttonpressed.sh. 
Please modify it to fit your purposes.


Scanner initialization
----------------------

Note: this only applies to some scanners supported by the
plustek, snapscan and niash backends. All scanners supported
by the epson backend do not need special initialization.

Some scanners require a special initialization procedure (firmware
uploading, for example) before they can be used by scanbuttond.
Since the scanbuttond backend modules cannot yet handle such 
operations, the initialization has to be performed by external 
programs, for example by "scanimage" which is part of SANE.
Have a look at the script "/etc/scanbuttond/initscanner.sh". This
script will be executed whenever a new device has to be initialized.
In most cases, it should be sufficient to put something like
"scanimage -n" into this script.


How to contribute to this project
---------------------------------

The development of scanbuttond should not be dependent on one 
single person, but a community effort.
You could help by ...

 * adding or enhancing a scanner backend
 * adding or enhancing a connection interface
 * doing some extensive testing
 * sending patches
 * sending bug reports
 * mailing ideas how to enhance scanbuttond
 * ...
 
If you want to help, please send me an email (see below).


Contact
-------

Any suggestions, criticism, bug reports/fixes, patches, ...
are appreciated. Feel free to contact me via email:

Bernhard Stiftner <root84@users.sourceforge.net>

